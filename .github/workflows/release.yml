name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

jobs:
  build-release:
    permissions:
      contents: write
    name: ${{ matrix.os }} â€¢ Release
    runs-on: ${{ matrix.os }}
    env:
      CONAN_HOME: ${{ github.workspace }}/.conan2
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Cache Conan (v2)
        uses: actions/cache@v4
        with:
          path: ${{ env.CONAN_HOME }}
          key: ${{ runner.os }}-conan2-${{ hashFiles('conanfile.*') }}
          restore-keys: |
            ${{ runner.os }}-conan2-

      - name: Install build tools (pip)
        run: |
          python -m pip install --upgrade pip
          pip install 'cmake>=3.31' 'conan>=2.2' ninja

      - name: Enable MSVC dev environment (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Detect Conan profile
        run: conan profile detect --force

      - name: Clean build directory
        shell: bash
        run: rm -rf build
      
      - name: Compute parallel jobs
        shell: bash
        run: |
          J=$(python - <<'PY'
          import multiprocessing,os
          print(min(8, max(2, multiprocessing.cpu_count())))  # cap to avoid thrashing
          PY
          )
          echo "JOBS=$J" >> "$GITHUB_ENV"
          echo "CMAKE_BUILD_PARALLEL_LEVEL=$J" >> "$GITHUB_ENV"
          echo "CONAN_CPU_COUNT=$J" >> "$GITHUB_ENV"

      - name: Conan install deps
        run: >-
          conan install .
          --output-folder=build
          --build=missing
          -s build_type=Release
          -s compiler.cppstd=23
          -c tools.build:jobs=${{ env.JOBS }}

      - name: Configure (CMake)
        run: >-
          cmake -S . -B build
          -DCMAKE_TOOLCHAIN_FILE=build/conan_toolchain.cmake
          -DCMAKE_BUILD_TYPE=Release

      - name: Build
        run: cmake --build build --config Release --parallel

      - name: Package artifacts (Linux)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p dist
          tar -czf dist/Poker-linux-x64.tar.gz -C build .

      - name: Package artifacts (Windows)
        if: runner.os == 'Windows'
        shell: bash
        run: |
          set -euxo pipefail
          mkdir -p dist
          7z a dist/Poker-windows-x64.zip build/*.exe || true
          7z a dist/Poker-windows-x64.zip build/**/Release/*.exe || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
